// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.

import 'dart:core';
import 'data_class_tools_test.dart' as prefix1;
import 'reflection.dart' as prefix0;

// ignore_for_file: camel_case_types
// ignore_for_file: implementation_imports
// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const

// ignore:unused_import
import 'package:reflectable/mirrors.dart' as m;
// ignore:unused_import
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
// ignore:unused_import
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.reflector(): r.ReflectorData(
      <m.TypeMirror>[
        r.NonGenericClassMirrorImpl(
            r'MyTestClass',
            r'.MyTestClass',
            134217735,
            0,
            const prefix0.reflector(),
            const <int>[-1],
            null,
            null,
            -1,
            {},
            {},
            {
              r'': (bool bb) => (a, b, c, d, e, f, g, h, i, j, k, l, m, n) => bb
                  ? prefix1.MyTestClass(
                      a, b, c, d, e, f, g, h, i, j, k, l, m, n)
                  : null
            },
            -1,
            -1,
            const <int>[-1],
            null,
            {
              r'==': 2,
              r'toString': 0,
              r'noSuchMethod': 2,
              r'hashCode': 0,
              r'runtimeType': 0,
              r'toFieldMap': 0,
              r'set': 1,
              r'get': 2,
              r'getType': 2,
              r'a': 0,
              r'a=': 2,
              r'b': 0,
              r'b=': 2,
              r'c': 0,
              r'c=': 2,
              r'd': 0,
              r'd=': 2,
              r'e': 0,
              r'e=': 2,
              r'f': 0,
              r'f=': 2,
              r'g': 0,
              r'g=': 2,
              r'h': 0,
              r'h=': 2,
              r'i': 0,
              r'i=': 2,
              r'j': 0,
              r'j=': 2,
              r'k': 0,
              r'k=': 2,
              r'l': 0,
              r'l=': 2,
              r'm': 0,
              r'm=': 2,
              r'n': 0,
              r'n=': 2
            })
      ],
      null,
      null,
      <Type>[prefix1.MyTestClass],
      1,
      {
        r'==': (dynamic instance) => (x) => instance == x,
        r'toString': (dynamic instance) => instance.toString,
        r'noSuchMethod': (dynamic instance) => instance.noSuchMethod,
        r'hashCode': (dynamic instance) => instance.hashCode,
        r'runtimeType': (dynamic instance) => instance.runtimeType,
        r'toFieldMap': (dynamic instance) => instance.toFieldMap,
        r'set': (dynamic instance) => instance.set,
        r'get': (dynamic instance) => instance.get,
        r'getType': (dynamic instance) => instance.getType,
        r'a': (dynamic instance) => instance.a,
        r'b': (dynamic instance) => instance.b,
        r'c': (dynamic instance) => instance.c,
        r'd': (dynamic instance) => instance.d,
        r'e': (dynamic instance) => instance.e,
        r'f': (dynamic instance) => instance.f,
        r'g': (dynamic instance) => instance.g,
        r'h': (dynamic instance) => instance.h,
        r'i': (dynamic instance) => instance.i,
        r'j': (dynamic instance) => instance.j,
        r'k': (dynamic instance) => instance.k,
        r'l': (dynamic instance) => instance.l,
        r'm': (dynamic instance) => instance.m,
        r'n': (dynamic instance) => instance.n
      },
      {
        r'a=': (dynamic instance, value) => instance.a = value,
        r'b=': (dynamic instance, value) => instance.b = value,
        r'c=': (dynamic instance, value) => instance.c = value,
        r'd=': (dynamic instance, value) => instance.d = value,
        r'e=': (dynamic instance, value) => instance.e = value,
        r'f=': (dynamic instance, value) => instance.f = value,
        r'g=': (dynamic instance, value) => instance.g = value,
        r'h=': (dynamic instance, value) => instance.h = value,
        r'i=': (dynamic instance, value) => instance.i = value,
        r'j=': (dynamic instance, value) => instance.j = value,
        r'k=': (dynamic instance, value) => instance.k = value,
        r'l=': (dynamic instance, value) => instance.l = value,
        r'm=': (dynamic instance, value) => instance.m = value,
        r'n=': (dynamic instance, value) => instance.n = value
      },
      null,
      [
        const [0, 0, null],
        const [2, 0, null],
        const [1, 0, null],
        const [14, 0, null]
      ])
};

final _memberSymbolMap = null;

void initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
